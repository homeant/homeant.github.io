<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on 怪咖晨</title><link>https://tianhui.xin/tags/java/</link><description>Recent content in Java on 怪咖晨</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Sat, 03 Apr 2021 18:30:52 +0800</lastBuildDate><atom:link href="https://tianhui.xin/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>mybatis对数据进行加密</title><link>https://tianhui.xin/blog/2021/04/03/mybatis_data_encryption/</link><pubDate>Sat, 03 Apr 2021 18:30:52 +0800</pubDate><guid>https://tianhui.xin/blog/2021/04/03/mybatis_data_encryption/</guid><description>&lt;p>开发过程中，你是否遇到需要对&lt;code>DB&lt;/code>敏感数据进行加密，通常的做法是，存储的时候调用加密方法，查询的时候对结果进行解密，
嗯？这应该是一个痛苦的过程，好吧，今晚给大家安利一个强大的工具&lt;code>data-shield&lt;/code>，针对&lt;code>mybatis&lt;/code>架构，对数据在进行写入时加密，查询解密，为你的数据保驾护航,
我想你一定会爱上它&lt;/p></description></item><item><title>跟我学SpringCloud 之 nacos</title><link>https://tianhui.xin/blog/2020/06/27/spring_cloud_nacos/</link><pubDate>Sat, 27 Jun 2020 12:30:52 +0800</pubDate><guid>https://tianhui.xin/blog/2020/06/27/spring_cloud_nacos/</guid><description>&lt;p>在&lt;code>spring cloud&lt;/code>体系中,有很多的注册中心和配置中心,比如最早的&lt;code>eureka&lt;/code>以及&lt;code>consul&lt;/code>、&lt;code>ZooKeeper&lt;/code>,配置中心有
&lt;code>spring cloud config&lt;/code> 及 携程的&lt;code>apollo config&lt;/code>,今天我们要说的是阿里新秀&lt;code>Nacos&lt;/code>来作为配置中心或者注册中心&lt;/p></description></item><item><title>一见倾心之初遇MapStruct</title><link>https://tianhui.xin/blog/2020/06/21/mapstruct/</link><pubDate>Sun, 21 Jun 2020 18:22:52 +0800</pubDate><guid>https://tianhui.xin/blog/2020/06/21/mapstruct/</guid><description>&lt;p>在开发过程中总会遇到Java对象相互转换,出了最原始及最高效的get/set一块,Java平台中,也出现了很多对象转换工具.&lt;/p></description></item><item><title>Mybatis Interceptor 实现数据脱敏</title><link>https://tianhui.xin/blog/2020/05/31/mybatisinterceptorofdatamasking/</link><pubDate>Sun, 31 May 2020 10:03:17 +0000</pubDate><guid>https://tianhui.xin/blog/2020/05/31/mybatisinterceptorofdatamasking/</guid><description>&lt;p>拦截器的一个作用就是我们可以拦截某些方法的调用，我们可以选择在这些被拦截的方法执行前后加上某些逻辑。
那么如果使用Mybatis对数据进行拦截，做一些满足自己需求的东西呢。今天我们就用这个实现一个数据的脱敏功能。&lt;/p></description></item><item><title>优雅的使用Java分布式锁</title><link>https://tianhui.xin/blog/2020/04/04/distributedlockuseredis/</link><pubDate>Sat, 04 Apr 2020 12:34:17 +0000</pubDate><guid>https://tianhui.xin/blog/2020/04/04/distributedlockuseredis/</guid><description>&lt;p>为了防止分布式系统中的多个进程之间相互干扰，我们需要一种分布式协调技术来对这些进程进行调度。
那么如何在Java 1.8中写出优雅的分布式锁，此篇文章为你讲解。&lt;/p></description></item><item><title>SpringBoot中使用SpringIntegration</title><link>https://tianhui.xin/blog/2019/09/30/springboot.use.springintegration/</link><pubDate>Mon, 30 Sep 2019 22:59:24 +0000</pubDate><guid>https://tianhui.xin/blog/2019/09/30/springboot.use.springintegration/</guid><description>&lt;p>spring-integration是一个功能强大的EIP(Enterprise Integration Patterns)，即企业集成模式。对，spring-integration是一个集大成者。就我自己的理解，集成了众多功能的它，是一种便捷的事件驱动消息框架用来在系统之间做消息传递的。
今天我们来探索一下如果使用它发送http请求。&lt;/p></description></item><item><title>springBoot 定制自己的starter</title><link>https://tianhui.xin/blog/2019/09/08/springbootcustomstarter/</link><pubDate>Sun, 08 Sep 2019 13:05:34 +0000</pubDate><guid>https://tianhui.xin/blog/2019/09/08/springbootcustomstarter/</guid><description>&lt;p>在学习Spring Boot的过程中，接触最多的就是starter。使用者可以把starter当成是一种服务，使得使用某个功能时不需要关注各种依赖库的处理，不需要具体的配置信息，由Spring Boot自动通过classpath路径下的类发现需要的Bean，并织入bean。而自动装配就是Springboot最大的特性。&lt;/p></description></item><item><title>BeanFactory详解</title><link>https://tianhui.xin/blog/2019/04/22/beanfactory/</link><pubDate>Mon, 22 Apr 2019 14:03:17 +0000</pubDate><guid>https://tianhui.xin/blog/2019/04/22/beanfactory/</guid><description>&lt;p>BeanFactory，它是一个接口工厂类，用于管理spring中的Bean。在Spring中，BeanFactory是IOC容器的核心接口，它的职责包括：实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。
Spring为我们提供了许多易用的BeanFactory实现，XmlBeanFactory就是常用的一个，该实现将以XML方式描述组成应用的对象及对象间的依赖关系。XmlBeanFactory类将持有此XML配置元数据，并用它来构建一个完全可配置的系统或应用。&lt;/p></description></item><item><title>activiti表结构</title><link>https://tianhui.xin/blog/2019/04/21/activititables/</link><pubDate>Sun, 21 Apr 2019 14:03:17 +0000</pubDate><guid>https://tianhui.xin/blog/2019/04/21/activititables/</guid><description>&lt;p>activiti表结构&lt;/p></description></item><item><title>springboot中使用sentinel</title><link>https://tianhui.xin/blog/2019/04/21/springbootsentinel/</link><pubDate>Sun, 21 Apr 2019 14:03:17 +0000</pubDate><guid>https://tianhui.xin/blog/2019/04/21/springbootsentinel/</guid><description>&lt;blockquote>
&lt;p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。 Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。&lt;/p>
&lt;/blockquote></description></item><item><title>springBoot系列 - 集成JWT实现接口权限认证</title><link>https://tianhui.xin/blog/2018/07/20/springboot.authentication/</link><pubDate>Fri, 20 Jul 2018 21:00:00 +0000</pubDate><guid>https://tianhui.xin/blog/2018/07/20/springboot.authentication/</guid><description>&lt;p>springBoot系列 - 集成JWT实现接口权限认证&lt;/p></description></item></channel></rss>